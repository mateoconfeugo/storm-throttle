(ns dk.storm.throttle.test.parse
  (:use [dk.storm.throttle.parse])
  (:use dk.storm.throttle.config)
  (:use [clojure.test])
  (:use dk.storm.throttle.api)
  (:import [dk.storm.throttle.api Log-Record]))

(def simple-log-line "123.45.67.89 - - [27/Oct/2000:09:27:09 -0400] \"GET /java/javaResources.html HTTP/1.0\" 200 10450 \"-\" \"Mozilla/4.6 [en] (X11; U; OpenBSD 2.8 i386; Nav)\"")

(def big-log-line "79.106.109.78 [03/Jun/2012:14:39:14 -0700] \"GET /feed?at=sb&pop=1&rs_tmp=rs_lu&count=10&rs_l=http%3A%2F%2Ffind.10topsearches.net%2F&par=11955&query=tax+consultant HTTP/1.1\" \"OK||0.506,0.648,7,61119,-cpip:0.006-blfl:0.054||11955|sb||nocpc=,fp=,sp=\" \"|11955||OK:10794=1|1|0|0,1164=2|2|0|0,9220=0|0|0|0,8992=1|3|0|0,2053=0|0|0|0,9218=1|4|0|0,10907=0|0|0|0,632=0|0|0|0,1592=geoFilter,3812=geoFilter,1018=geoFilter,2409=geoFilter,6397=geoFilter,6019=geoFilter,1339=geoFilter,1172=geoFilter,6285=geoFilter,3535=geoFilter,4230=geoFilter,3299=geoFilter,1905=geoFilter,7019=geoFilter,4147=geoFilter,3301=geoFilter,1210=geoFilter+10794|31631|11955|OK:9242=1|1|0|0,9629=error-timeout,10407=geoFilter,11135=geoFilter,9542=geoFilter+1164|11515|11955|OK:10259=0|0|0|0,404=0|0|0|0,9813=2|5|0|3,11312=error-timeout,11635=0|0|0|0,11636=0|0|0|0,2514=geoFilter,1037=geoFilter,2086=geoFilter,4299=geoFilter,2169=geoFilter,1253=geoFilter,1254=daypart,2322=geoFilter,10229=geoFilter,11014=geoFilter,8419=geoFilter,8181=geoFilter,1769=geoFilter,11311=geoFilter,9776=geoFilter,6852=geoFilter,1547=geoFilter+11635|33848|11515|OK:11503=circleJ,11983=circleJ,11683=circleJ,11736=circleJ,11563=circleJ,11657=geoFilter+11636|33847|11515|OK:11503=circleJ,11983=circleJ,11683=circleJ,11736=circleJ,11563=circleJ,11657=geoFilter+9220|30004|11955|OK:7140=error-timeout,8894=0|0|0|0,11260=0|0|0|0,11261=0|0|0|0,11259=0|0|0|0,11704=error-timeout,10975=geoFilter,10973=geoFilter,11206=geoFilter,10968=geoFilter,7125=geoFilter+8894|29693|30004|OK:10759=0|0|0|0,5077=circleJ,5275=circleJ,7036=circleJ,8414=circleJ,6862=circleJ+8992|26932|11955|OK:11970=0|0|0|0,11152=0|0|0|0,8973=0|0|0|0,11027=0|0|0|0,9766=3|5|0|4,8571=0|2|0|0,9039=0|0|0|0,9064=0|0|0|0,9018=error-empty,11176=0|0|0|0,9097=geoFilter,11439=geoFilter,10023=geoFilter,11417=geoFilter,10916=geoFilter,10955=geoFilter+11970|34022|26932|OK:11678=0|0|0|0,11566=circleJ,11550=circleJ,11618=circleJ,11619=circleJ,11503=circleJ,11555=circleJ,11557=circleJ,11621=circleJ,11627=circleJ,11657=geoFilter,11571=geoFilter,11983=circleJ,11683=circleJ,11564=circleJ,11622=circleJ,11647=circleJ,11736=circleJ,11682=circleJ,11596=circleJ,11628=circleJ,11563=circleJ,11595=circleJ,11565=circleJ+11152|32742|26932|OK:11981=0|0|0|0,11300=0|0|0|0,11036=circleJ,11037=circleJ,11299=circleJ,10980=circleJ,10979=circleJ,11358=circleJ,12049=circleJ,11106=circleJ,11359=circleJ,10491=circleJ,10828=circleJ,11111=circleJ,11387=circleJ,11273=circleJ,11356=circleJ,10988=circleJ,11452=circleJ,12050=circleJ,11540=circleJ,11327=geoFilter,10966=geoFilter,11140=geoFilter,10961=geoFilter,11213=geoFilter,11113=geoFilter,11984=geoFilter,11992=geoFilter+8973|29878|26932|OK:900=circleJ,1121=circleJ,8358=circleJ,2907=circleJ,2499=circleJ,6005=circleJ,10235=circleJ,7872=geoFilter,897=geoFilter,1051=geoFilter,11561=geoFilter,10996=geoFilter+8571|29217|26932|OK:8569=2|5|0|5,10179=geoFilter+9039|29933|26932|OK:11368=circleJ,11369=circleJ,12002=circleJ,10941=circleJ,8696=circleJ,7799=circleJ,8315=geoFilter+9064|29975|26932|OK:11686=circleJ,5672=circleJ,9777=circleJ,10765=circleJ,5368=circleJ,10293=circleJ,10766=circleJ,4752=circleJ,3145=geoFilter,6561=geoFilter,5011=geoFilter,4115=geoFilter+2053|16750|11955|OK:11394=0|0|0|0,4654=0|0|0|0,123=geoFilter,1131=geoFilter,1126=geoFilter,95=geoFilter,3794=geoFilter,11922=geoFilter+4654|22279|16750|OK:6298=circleJ,4257=geoFilter,6998=circleJ,7630=geoFilter+9218|28304|11955|OK:9248=3|3|0|3,9247=0|3|0|0,9523=1|1|0|0,7880=0|0|0|0,7809=geoFilter,7811=geoFilter,8304=geoFilter,7029=geoFilter+9248|30199|28304|OK:11176=error-timeout,9766=3|5|0|2,11027=0|0|0|0,9018=error-empty,8709=0|0|0|0,9020=geoFilter,11439=geoFilter,8726=circleJ,8973=circleJ,7201=circleJ,9097=circleJ,8571=circleJ,10023=circleJ,11152=circleJ,9039=circleJ,8862=circleJ,8256=circleJ,6956=circleJ,9183=circleJ,8879=circleJ,8943=circleJ,8928=circleJ,9064=circleJ,9760=circleJ,9095=circleJ,10932=geoFilter,11970=circleJ,11417=circleJ,10955=circleJ,9941=circleJ,10916=circleJ+9247|30198|28304|OK:11027=0|0|0|0,9184=error-empty,9610=3|5|0|5,11176=error-timeout,8707=0|0|0|0,11969=circleJ,9172=circleJ,8972=circleJ,9802=circleJ,10023=circleJ,11152=circleJ,9938=circleJ,9020=geoFilter,9256=circleJ,6957=circleJ,8592=circleJ,8931=circleJ,8878=circleJ,8942=circleJ,9759=circleJ,9040=circleJ,9110=circleJ,10932=geoFilter,10910=circleJ,11439=geoFilter,11417=circleJ+9523|30480|28304|OK:10993=1|1|0|0,9470=0|0|0|0,9397=geoFilter,10869=geoFilter+7880|28251|28304|OK:7357=circleJ,7368=circleJ,7972=circleJ,7369=circleJ,7569=circleJ,7767=circleJ+10907|31538|11955|OK:8277=0|0|0|0,10283=0|0|0|0,11724=error-timeout,10768=0|0|0|0,10978=0|0|0|0,11966=geoFilter,11544=geoFilter,11726=geoFilter,10693=geoFilter,11727=geoFilter,11193=geoFilter,10318=geoFilter,10690=geoFilter,11414=geoFilter,11620=geoFilter,10319=geoFilter,12058=geoFilter,12059=geoFilter,10545=geoFilter,11483=geoFilter+8277|28875|31538|OK:5729=geoFilter,5495=geoFilter,7924=geoFilter,10644=geoFilter,4746=geoFilter,5730=geoFilter,9554=geoFilter,6669=geoFilter,4488=geoFilter,9743=geoFilter,6820=circleJ,4467=circleJ,5733=geoFilter,7805=circleJ,11794=geoFilter,10665=circleJ,9488=circleJ,11606=circleJ,5731=geoFilter,6895=circleJ,6997=geoFilter,7919=geoFilter,7920=geoFilter,7921=geoFilter,7922=geoFilter,7923=geoFilter,11265=circleJ+10768|32300|31538|OK:4257=geoFilter,7118=geoFilter,8560=circleJ+10978|32683|31538|OK:10644=geoFilter,9554=geoFilter,9743=geoFilter,7233=geoFilter,4488=geoFilter,6669=geoFilter,10940=circleJ,4467=circleJ,11794=geoFilter,6820=circleJ,10665=circleJ,9488=circleJ,11606=circleJ,9468=geoFilter,11265=circleJ+\" \"9242=0.000414,9629=0,10794=0.000169,10259=0,404=0,9813=0.000001,11312=0,11635=0,11636=0,1164=0,7140=0,10759=0,8894=0,11260=0,11261=0,11259=0,11704=0,9220=0,11678=0,11970=0,11981=0,11300=0,11152=0,8973=0,11027=0,9766=0,8569=0,8571=0,9039=0,9064=0,9018=0,11176=0,8992=0,11394=0,4654=0,2053=0,11176=0,9766=0,11027=0,9018=0,8709=0,9248=0,11027=0,9184=0,9610=0,11176=0,8707=0,9247=0,10993=0.000006,9470=0,9523=0.000002,7880=0,9218=0.000001,8277=0,10283=0,11724=0,10768=0,10978=0,10907=0,632=0,\" \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; GTB6.6; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET CLR 1.1.4322; .NET4.0C)")
 

(def sample-log-line "220.255.2.119 [24/May/2012:00:01:01 -0700] \"GET /feed?at=cpv&pop=1&count=1&rnd=807297240806&par=20322&rs_tmp=CPV HTTP/1.0\" \"OK||0.811,0.850,0,2132,-cpip:0.008-blfl:0.003|30137|20322|cpv||nocpc=,fp=,sp=\" \"|20322||OK:1551=0|0|0|0,6711=0|0|0|0,6757=0|0|0|0\" \"1551=0,6711=0,6757=0,\" \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; FunWebProducts; SIMBAR={A1BC0796-83CF-11E1-8127-0030678B1A55}; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.0.30729; OfficeLiveConnector.1.3; OfficeLivePatch.0.0; FunWebProducts; AskTbMTV/5.14.1.20007; .NET CLR 3.5.30729)")

(def simple-log-record (map->Log-Record {:client-ip "123.45.67.89", :date "27/Oct/2000:09:27:09 -0400", :method "GET" :uri "/java/javaResources.html HTTP/1.0", :http-code "200", :number-bytes "10450", :referer nil, :agent "-"}))

(def query-log-record (map->Log-Record {:client-ip "123.45.67.89", :date "27/Oct/2000:09:27:09 -0400", :method "GET"  :uri "/feed?at=cpv&pop=1&count=1&rnd=807297240806&par=20322&rs_tmp=CPV HTTP/1.0\" \"OK||0.811,0.850,0,2132,-cpip:0.008-blfl:0.003|30137|20322|cpv||nocpc=,fp=,sp=\" \"|20322||OK:1551=0|0|0|0,6711=0|0|0|0,6757=0|0|0|0\" \"1551=0,6711=0,6757=0,\"" :http-code "200", :number-bytes "10450", :referer nil, :agent "-"}))

(comment
(deftest parse-query-test
  (let [my-parser (new-parser (dk.storm.throttle.config/config))
        log-record (parse-query my-parser sample-log-line)]
    (is (= log-record sample-query-record))))

(deftest extract-query-test
  (let [my-parser (new-parser (dk.storm.throttle.config/config))
        query-record (extract-query my-parser sample-log-line)]
    (is (= query-record sample-query-record))))
)

(deftest parse-log-test
  (let [parser (new-parser (dk.storm.throttle.config/config))
        record (parse-log parser simple-log-line)
        query-record (parse-log parser sample-log-line)
        big-record  (parse-log parser big-log-line)]
    (is (= simple-log-record record))
    (is (= query-log-record query-record))
    (is (= big-record query-record))))

(run-tests 'dk.storm.throttle.test.parse)